import React, { useState, useEffect } from 'react';
import { Button } from './components/ui/button';
import { Input } from './components/ui/input';
import { Label } from './components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './components/ui/tabs';
import { Badge } from './components/ui/badge';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from './components/ui/dialog';
import { toast } from 'sonner';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from './components/ui/table';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from './components/ui/dropdown-menu';
import {
  Loader2,
  Search,
  Filter,
  MoreHorizontal,
  Eye,
  RefreshCw,
  AlertCircle,
  CheckCircle,
  Clock,
  ExternalLink,
  Webhook,
  Activity,
  Zap,
  AlertTriangle,
  FileText,
  Calendar,
} from 'lucide-react';

interface WebhookEvent {
  id: string;
  stripe_event_id: string;
  event_type: string;
  processed: boolean;
  success: boolean;
  error_message?: string;
  processing_time_ms?: number;
  retry_count: number;
  created_at: string;
  processed_at?: string;
  raw_data?: any;
}

interface WebhookStats {
  totalEvents: number;
  successfulEvents: number;
  failedEvents: number;
  pendingEvents: number;
  averageProcessingTime: number;
  eventsByType: Array<{
    event_type: string;
    count: number;
    success_rate: number;
  }>;
  recentErrors: Array<{
    event_type: string;
    error_message: string;
    created_at: string;
  }>;
}

const EVENT_TYPE_COLORS: Record<string, string> = {
  'checkout.session.completed': 'bg-green-100 text-green-800',
  'payment_intent.succeeded': 'bg-blue-100 text-blue-800',
  'payment_intent.payment_failed': 'bg-red-100 text-red-800',
  'customer.subscription.created': 'bg-purple-100 text-purple-800',
  'customer.subscription.updated': 'bg-yellow-100 text-yellow-800',
  'customer.subscription.deleted': 'bg-red-100 text-red-800',
  'invoice.payment_succeeded': 'bg-green-100 text-green-800',
  'invoice.payment_failed': 'bg-red-100 text-red-800',
  'product.created': 'bg-blue-100 text-blue-800',
  'product.updated': 'bg-yellow-100 text-yellow-800',
  'price.created': 'bg-blue-100 text-blue-800',
  'price.updated': 'bg-yellow-100 text-yellow-800',
};

export const WebhookManager: React.FC = () => {
  const [webhookEvents, setWebhookEvents] = useState<WebhookEvent[]>([]);
  const [webhookStats, setWebhookStats] = useState<WebhookStats | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedEvent, setSelectedEvent] = useState<WebhookEvent | null>(null);
  const [isDetailOpen, setIsDetailOpen] = useState(false);
  const [filters, setFilters] = useState({
    eventType: '',
    status: '',
    search: '',
    dateFrom: '',
    dateTo: '',
  });
  const [pagination, setPagination] = useState({
    page: 1,
    limit: 50,
    total: 0,
  });

  const fetchWebhookData = async () => {
    setIsLoading(true);
    try {
      // Fetch webhook events
      const params = new URLSearchParams({
        limit: pagination.limit.toString(),
        offset: ((pagination.page - 1) * pagination.limit).toString(),
        ...(filters.eventType && { eventType: filters.eventType }),
        ...(filters.status && { status: filters.status }),
        ...(filters.search && { search: filters.search }),
        ...(filters.dateFrom && { dateFrom: filters.dateFrom }),
        ...(filters.dateTo && { dateTo: filters.dateTo }),
      });

      const eventsResponse = await fetch(`/api/admin/webhooks/events?${params}`);
      const eventsData = await eventsResponse.json();
      setWebhookEvents(eventsData.events || []);
      setPagination(prev => ({ ...prev, total: eventsData.pagination?.total || 0 }));

      // Fetch webhook statistics
      const statsResponse = await fetch('/api/admin/webhooks/stats');
      const statsData = await statsResponse.json();
      setWebhookStats(statsData);

    } catch (error) {
      console.error('Error fetching webhook data:', error);
      toast.error('Failed to load webhook data');
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchWebhookData();
  }, [pagination.page, pagination.limit]);

  const handleRetryEvent = async (eventId: string) => {
    try {
      const response = await fetch(`/api/admin/webhooks/retry/${eventId}`, {
        method: 'POST',
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to retry webhook event');
      }

      toast.success('Webhook event queued for retry');
      await fetchWebhookData();
    } catch (error) {
      console.error('Error retrying webhook event:', error);
      toast.error(error instanceof Error ? error.message : 'Failed to retry webhook event');
    }
  };

  const handleSearch = () => {
    setPagination(prev => ({ ...prev, page: 1 }));
    fetchWebhookData();
  };

  const clearFilters = () => {
    setFilters({
      eventType: '',
      status: '',
      search: '',
      dateFrom: '',
      dateTo: '',
    });
    setPagination(prev => ({ ...prev, page: 1 }));
    setTimeout(() => fetchWebhookData(), 100);
  };

  const openEventDetail = (event: WebhookEvent) => {
    setSelectedEvent(event);
    setIsDetailOpen(true);
  };

  const getStatusBadge = (event: WebhookEvent) => {
    if (!event.processed) {
      return (
        <Badge className="bg-yellow-100 text-yellow-800">
          <Clock className="h-3 w-3 mr-1" />
          Pending
        </Badge>
      );
    }
    if (event.success) {
      return (
        <Badge className="bg-green-100 text-green-800">
          <CheckCircle className="h-3 w-3 mr-1" />
          Success
        </Badge>
      );
    }
    return (
      <Badge className="bg-red-100 text-red-800">
        <AlertCircle className="h-3 w-3 mr-1" />
        Failed
      </Badge>
    );
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center p-8">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
        <span className="ml-2">Loading webhook data...</span>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-3xl font-bold tracking-tight">Webhook Management</h2>
          <p className="text-muted-foreground">
            Monitor and debug Stripe webhook events
          </p>
        </div>
        <div className="flex gap-3">
          <Button onClick={fetchWebhookData} variant="outline">
            <RefreshCw className="mr-2 h-4 w-4" />
            Refresh
          </Button>
        </div>
      </div>

      {/* Statistics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Events</CardTitle>
            <Webhook className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{webhookStats?.totalEvents || 0}</div>
            <p className="text-xs text-muted-foreground">
              All time
            </p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Successful</CardTitle>
            <CheckCircle className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">
              {webhookStats?.successfulEvents || 0}
            </div>
            <p className="text-xs text-muted-foreground">
              {webhookStats?.totalEvents ? 
                ((webhookStats.successfulEvents / webhookStats.totalEvents) * 100).toFixed(1) : '0'
              }% success rate
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Failed</CardTitle>
            <AlertCircle className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-600">
              {webhookStats?.failedEvents || 0}
            </div>
            <p className="text-xs text-muted-foreground">
              Need attention
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Pending</CardTitle>
            <Clock className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-yellow-600">
              {webhookStats?.pendingEvents || 0}
            </div>
            <p className="text-xs text-muted-foreground">
              Processing
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Avg Processing Time</CardTitle>
            <Activity className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {webhookStats?.averageProcessingTime.toFixed(0) || 0}ms
            </div>
            <p className="text-xs text-muted-foreground">
              Average response
            </p>
          </CardContent>
        </Card>
      </div>

      <Tabs defaultValue="events">
        <TabsList>
          <TabsTrigger value="events">Recent Events</TabsTrigger>
          <TabsTrigger value="types">Event Types</TabsTrigger>
          <TabsTrigger value="errors">Error Analysis</TabsTrigger>
        </TabsList>

        <TabsContent value="events" className="space-y-6">
          {/* Filters */}
          <Card>
            <CardHeader>
              <CardTitle className="text-base">Filters</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-6 gap-4">
                <div>
                  <Label>Search Events</Label>
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
                    <Input
                      placeholder="Event ID, type..."
                      className="pl-10"
                      value={filters.search}
                      onChange={(e) => setFilters(prev => ({ ...prev, search: e.target.value }))}
                      onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
                    />
                  </div>
                </div>
                <div>
                  <Label>Event Type</Label>
                  <Input
                    placeholder="e.g., checkout.session"
                    value={filters.eventType}
                    onChange={(e) => setFilters(prev => ({ ...prev, eventType: e.target.value }))}
                  />
                </div>
                <div>
                  <Label>Status</Label>
                  <select
                    className="w-full p-2 border rounded"
                    value={filters.status}
                    onChange={(e) => setFilters(prev => ({ ...prev, status: e.target.value }))}
                  >
                    <option value="">All</option>
                    <option value="success">Success</option>
                    <option value="failed">Failed</option>
                    <option value="pending">Pending</option>
                  </select>
                </div>
                <div>
                  <Label>Date From</Label>
                  <Input
                    type="date"
                    value={filters.dateFrom}
                    onChange={(e) => setFilters(prev => ({ ...prev, dateFrom: e.target.value }))}
                  />
                </div>
                <div>
                  <Label>Date To</Label>
                  <Input
                    type="date"
                    value={filters.dateTo}
                    onChange={(e) => setFilters(prev => ({ ...prev, dateTo: e.target.value }))}
                  />
                </div>
                <div className="flex items-end gap-2">
                  <Button onClick={handleSearch}>
                    <Search className="h-4 w-4 mr-2" />
                    Search
                  </Button>
                  <Button variant="outline" onClick={clearFilters}>
                    Clear
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Events Table */}
          <Card>
            <CardHeader>
              <CardTitle>Webhook Events</CardTitle>
              <CardDescription>
                Recent Stripe webhook events and their processing status
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Event</TableHead>
                    <TableHead>Type</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Processing Time</TableHead>
                    <TableHead>Retries</TableHead>
                    <TableHead>Date</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {webhookEvents.length === 0 ? (
                    <TableRow>
                      <TableCell colSpan={7} className="h-24 text-center">
                        No webhook events found.
                      </TableCell>
                    </TableRow>
                  ) : (
                    webhookEvents.map((event) => (
                      <TableRow key={event.id}>
                        <TableCell className="font-medium">
                          <div className="space-y-1">
                            <div className="font-mono text-sm">{event.stripe_event_id}</div>
                            <div className="text-xs text-muted-foreground">#{event.id.slice(-8)}</div>
                          </div>
                        </TableCell>
                        <TableCell>
                          <Badge className={EVENT_TYPE_COLORS[event.event_type] || 'bg-gray-100 text-gray-800'}>
                            {event.event_type}
                          </Badge>
                        </TableCell>
                        <TableCell>
                          {getStatusBadge(event)}
                        </TableCell>
                        <TableCell>
                          {event.processing_time_ms ? 
                            `${event.processing_time_ms}ms` : 
                            '-'
                          }
                        </TableCell>
                        <TableCell>
                          {event.retry_count > 0 ? (
                            <Badge variant="outline">{event.retry_count}</Badge>
                          ) : (
                            '-'
                          )}
                        </TableCell>
                        <TableCell>
                          <div className="text-sm">
                            {new Date(event.created_at).toLocaleString()}
                          </div>
                        </TableCell>
                        <TableCell className="text-right">
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <Button variant="ghost" className="h-8 w-8 p-0">
                                <MoreHorizontal className="h-4 w-4" />
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent align="end">
                              <DropdownMenuLabel>Actions</DropdownMenuLabel>
                              <DropdownMenuItem onClick={() => openEventDetail(event)}>
                                <Eye className="mr-2 h-4 w-4" />
                                View Details
                              </DropdownMenuItem>
                              {!event.success && (
                                <>
                                  <DropdownMenuSeparator />
                                  <DropdownMenuItem onClick={() => handleRetryEvent(event.id)}>
                                    <RefreshCw className="mr-2 h-4 w-4" />
                                    Retry Event
                                  </DropdownMenuItem>
                                </>
                              )}
                              <DropdownMenuSeparator />
                              <DropdownMenuItem asChild>
                                <a
                                  href={`https://dashboard.stripe.com/events/${event.stripe_event_id}`}
                                  target="_blank"
                                  rel="noopener noreferrer"
                                >
                                  <ExternalLink className="mr-2 h-4 w-4" />
                                  View in Stripe
                                </a>
                              </DropdownMenuItem>
                            </DropdownMenuContent>
                          </DropdownMenu>
                        </TableCell>
                      </TableRow>
                    ))
                  )}
                </TableBody>
              </Table>

              {/* Pagination */}
              {pagination.total > pagination.limit && (
                <div className="flex items-center justify-between pt-4">
                  <div className="text-sm text-muted-foreground">
                    Showing {((pagination.page - 1) * pagination.limit) + 1} to{' '}
                    {Math.min(pagination.page * pagination.limit, pagination.total)} of{' '}
                    {pagination.total} events
                  </div>
                  <div className="flex items-center space-x-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setPagination(prev => ({ ...prev, page: prev.page - 1 }))}
                      disabled={pagination.page === 1}
                    >
                      Previous
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setPagination(prev => ({ ...prev, page: prev.page + 1 }))}
                      disabled={pagination.page * pagination.limit >= pagination.total}
                    >
                      Next
                    </Button>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="types">
          <Card>
            <CardHeader>
              <CardTitle>Event Types Statistics</CardTitle>
              <CardDescription>
                Performance breakdown by webhook event type
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Event Type</TableHead>
                    <TableHead>Total Count</TableHead>
                    <TableHead>Success Rate</TableHead>
                    <TableHead>Status</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {webhookStats?.eventsByType.map((eventType) => (
                    <TableRow key={eventType.event_type}>
                      <TableCell>
                        <Badge className={EVENT_TYPE_COLORS[eventType.event_type] || 'bg-gray-100 text-gray-800'}>
                          {eventType.event_type}
                        </Badge>
                      </TableCell>
                      <TableCell>{eventType.count}</TableCell>
                      <TableCell>
                        <div className="flex items-center">
                          <div className="w-16 mr-2">
                            {eventType.success_rate.toFixed(1)}%
                          </div>
                          <div className="flex-1 bg-gray-200 rounded-full h-2">
                            <div
                              className="bg-green-500 h-2 rounded-full"
                              style={{ width: `${eventType.success_rate}%` }}
                            />
                          </div>
                        </div>
                      </TableCell>
                      <TableCell>
                        {eventType.success_rate >= 95 ? (
                          <CheckCircle className="h-4 w-4 text-green-500" />
                        ) : eventType.success_rate >= 80 ? (
                          <AlertTriangle className="h-4 w-4 text-yellow-500" />
                        ) : (
                          <AlertCircle className="h-4 w-4 text-red-500" />
                        )}
                      </TableCell>
                    </TableRow>
                  )) || (
                    <TableRow>
                      <TableCell colSpan={4} className="text-center">No event type data available</TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="errors">
          <Card>
            <CardHeader>
              <CardTitle>Recent Errors</CardTitle>
              <CardDescription>
                Failed webhook events that need attention
              </CardDescription>
            </CardHeader>
            <CardContent>
              {webhookStats?.recentErrors.length === 0 ? (
                <div className="text-center py-8">
                  <CheckCircle className="h-12 w-12 text-green-500 mx-auto mb-4" />
                  <p className="text-lg font-medium">No recent errors</p>
                  <p className="text-muted-foreground">All webhook events are processing successfully</p>
                </div>
              ) : (
                <div className="space-y-4">
                  {webhookStats?.recentErrors.map((error, index) => (
                    <div
                      key={index}
                      className="p-4 rounded-lg border border-red-200 bg-red-50"
                    >
                      <div className="flex items-start justify-between">
                        <div className="flex items-start">
                          <AlertCircle className="h-5 w-5 mr-3 text-red-500 mt-0.5" />
                          <div>
                            <p className="font-medium text-red-800">
                              {error.event_type}
                            </p>
                            <p className="text-sm text-red-600 mt-1">
                              {error.error_message}
                            </p>
                          </div>
                        </div>
                        <div className="text-sm text-red-600">
                          {new Date(error.created_at).toLocaleDateString()}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Event Detail Dialog */}
      <Dialog open={isDetailOpen} onOpenChange={setIsDetailOpen}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Webhook Event Details</DialogTitle>
          </DialogHeader>
          {selectedEvent && <WebhookEventDetail event={selectedEvent} />}
        </DialogContent>
      </Dialog>
    </div>
  );
};

// Webhook Event Detail Component
interface WebhookEventDetailProps {
  event: WebhookEvent;
}

const WebhookEventDetail: React.FC<WebhookEventDetailProps> = ({ event }) => {
  return (
    <div className="space-y-6">
      {/* Event Summary */}
      <Card>
        <CardHeader>
          <CardTitle className="text-base">Event Summary</CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          <div className="grid grid-cols-2 gap-4">
            <div className="flex justify-between">
              <span className="text-muted-foreground">Stripe Event ID:</span>
              <span className="font-mono">{event.stripe_event_id}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-muted-foreground">Internal ID:</span>
              <span className="font-mono">{event.id}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-muted-foreground">Event Type:</span>
              <Badge className={EVENT_TYPE_COLORS[event.event_type] || 'bg-gray-100 text-gray-800'}>
                {event.event_type}
              </Badge>
            </div>
            <div className="flex justify-between">
              <span className="text-muted-foreground">Status:</span>
              {getStatusBadge(event)}
            </div>
            <div className="flex justify-between">
              <span className="text-muted-foreground">Processing Time:</span>
              <span>{event.processing_time_ms ? `${event.processing_time_ms}ms` : 'N/A'}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-muted-foreground">Retry Count:</span>
              <span>{event.retry_count}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-muted-foreground">Created:</span>
              <span>{new Date(event.created_at).toLocaleString()}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-muted-foreground">Processed:</span>
              <span>
                {event.processed_at ? new Date(event.processed_at).toLocaleString() : 'Not processed'}
              </span>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Error Details */}
      {event.error_message && (
        <Card>
          <CardHeader>
            <CardTitle className="text-base text-red-600">Error Details</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="p-4 bg-red-50 rounded-lg border border-red-200">
              <p className="text-red-800 font-mono text-sm">{event.error_message}</p>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Raw Event Data */}
      <Card>
        <CardHeader>
          <CardTitle className="text-base">Raw Event Data</CardTitle>
          <CardDescription>
            The original webhook payload from Stripe
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="bg-gray-50 p-4 rounded-lg">
            <pre className="text-xs overflow-auto max-h-96">
              {JSON.stringify(event.raw_data || {}, null, 2)}
            </pre>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

// Helper function to get status badge (reused from main component)
const getStatusBadge = (event: WebhookEvent) => {
  if (!event.processed) {
    return (
      <Badge className="bg-yellow-100 text-yellow-800">
        <Clock className="h-3 w-3 mr-1" />
        Pending
      </Badge>
    );
  }
  if (event.success) {
    return (
      <Badge className="bg-green-100 text-green-800">
        <CheckCircle className="h-3 w-3 mr-1" />
        Success
      </Badge>
    );
  }
  return (
    <Badge className="bg-red-100 text-red-800">
      <AlertCircle className="h-3 w-3 mr-1" />
      Failed
    </Badge>
  );
};
