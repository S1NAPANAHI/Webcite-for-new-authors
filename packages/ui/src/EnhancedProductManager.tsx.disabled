import React, { useState, useEffect } from 'react';
import { Button } from './components/ui/button';
import { Input } from './components/ui/input';
import { Label } from './components/ui/label';
import { Textarea } from './components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './components/ui/select';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './components/ui/tabs';
import { Badge } from './components/ui/badge';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from './components/ui/dialog';
import { toast } from 'sonner';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from './components/ui/table';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from './components/ui/alert-dialog';
import {
  Loader2,
  Plus,
  Pencil,
  Trash2,
  Package,
  DollarSign,
  ExternalLink,
  RefreshCw,
  Upload,
  Eye,
  EyeOff,
  Boxes,
  AlertTriangle,
  Check,
  X,
} from 'lucide-react';

interface ProductVariant {
  id?: string;
  name: string;
  price: number;
  attributes: Record<string, string>;
  inventory_quantity?: number;
  stripe_price_id?: string;
  active?: boolean;
}

interface Product {
  id?: string;
  name: string;
  description?: string;
  price?: number;
  category?: string;
  product_type: string;
  images?: string[];
  active: boolean;
  stripe_product_id?: string;
  stripe_price_id?: string;
  inventory_quantity?: number;
  variants?: ProductVariant[];
  created_at?: string;
  updated_at?: string;
}

interface ProductFormData extends Omit<Product, 'id' | 'created_at' | 'updated_at'> {
  createInStripe?: boolean;
}

export const EnhancedProductManager: React.FC = () => {
  const [products, setProducts] = useState<Product[]>([]);
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [editingProduct, setEditingProduct] = useState<Product | null>(null);
  const [isSyncing, setIsSyncing] = useState(false);
  const [syncStats, setSyncStats] = useState({ products: 0, prices: 0 });

  const fetchProducts = async () => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/products-v2');
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      setProducts(data.products || []);
    } catch (error) {
      console.error('Error fetching products:', error);
      toast.error('Failed to load products');
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchProducts();
  }, []);

  const handleSave = async (productData: ProductFormData) => {
    setIsSubmitting(true);
    try {
      let response;
      const url = editingProduct ? 
        `/api/products-v2/${editingProduct.id}` : 
        '/api/products-v2';
      
      response = await fetch(url, {
        method: editingProduct ? 'PUT' : 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(productData),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to save product');
      }
      
      toast.success(editingProduct ? 'Product updated successfully' : 'Product created successfully');
      setIsFormOpen(false);
      setEditingProduct(null);
      await fetchProducts();
    } catch (error) {
      console.error('Error saving product:', error);
      toast.error(error instanceof Error ? error.message : 'Failed to save product');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleDelete = async (id: string) => {
    try {
      const response = await fetch(`/api/products-v2/${id}`, {
        method: 'DELETE',
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to delete product');
      }
      
      toast.success('Product deleted successfully');
      await fetchProducts();
    } catch (error) {
      console.error('Error deleting product:', error);
      toast.error(error instanceof Error ? error.message : 'Failed to delete product');
    }
  };

  const handleStripeSync = async () => {
    setIsSyncing(true);
    try {
      const response = await fetch('/api/products-v2/sync-stripe', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ direction: 'both' }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Sync failed');
      }

      const result = await response.json();
      setSyncStats({
        products: result.productsSync?.created + result.productsSync?.updated || 0,
        prices: result.pricesSync?.created + result.pricesSync?.updated || 0,
      });
      
      toast.success('Stripe synchronization completed successfully');
      await fetchProducts();
    } catch (error) {
      console.error('Error syncing with Stripe:', error);
      toast.error(error instanceof Error ? error.message : 'Sync failed');
    } finally {
      setIsSyncing(false);
    }
  };

  const handleEdit = (product: Product) => {
    setEditingProduct(product);
    setIsFormOpen(true);
  };

  const handleCloseForm = () => {
    setIsFormOpen(false);
    setEditingProduct(null);
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center p-8">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
        <span className="ml-2">Loading products...</span>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-3xl font-bold tracking-tight">Product Management</h2>
          <p className="text-muted-foreground">
            Manage your products, variants, and Stripe synchronization
          </p>
        </div>
        <div className="flex gap-3">
          <Button 
            variant="outline" 
            onClick={handleStripeSync}
            disabled={isSyncing}
          >
            <RefreshCw className={`mr-2 h-4 w-4 ${isSyncing ? 'animate-spin' : ''}`} />
            Sync with Stripe
          </Button>
          <Dialog open={isFormOpen} onOpenChange={handleCloseForm}>
            <DialogTrigger asChild>
              <Button onClick={() => setIsFormOpen(true)}>
                <Plus className="mr-2 h-4 w-4" />
                Add Product
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle>
                  {editingProduct ? 'Edit Product' : 'Create New Product'}
                </DialogTitle>
              </DialogHeader>
              <ProductForm 
                product={editingProduct} 
                onSave={handleSave} 
                onCancel={handleCloseForm} 
                isSubmitting={isSubmitting}
              />
            </DialogContent>
          </Dialog>
        </div>
      </div>

      {/* Statistics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Products</CardTitle>
            <Package className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{products.length}</div>
            <p className="text-xs text-muted-foreground">
              {products.filter(p => p.active).length} active
            </p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Stripe Linked</CardTitle>
            <ExternalLink className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {products.filter(p => p.stripe_product_id).length}
            </div>
            <p className="text-xs text-muted-foreground">
              {((products.filter(p => p.stripe_product_id).length / products.length) * 100 || 0).toFixed(0)}% linked
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">With Variants</CardTitle>
            <Boxes className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {products.filter(p => p.variants && p.variants.length > 0).length}
            </div>
            <p className="text-xs text-muted-foreground">
              Total variants: {products.reduce((acc, p) => acc + (p.variants?.length || 0), 0)}
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Low Stock</CardTitle>
            <AlertTriangle className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {products.filter(p => (p.inventory_quantity || 0) < 10).length}
            </div>
            <p className="text-xs text-muted-foreground">
              Need restocking
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Products Table */}
      <Card>
        <CardHeader>
          <CardTitle>Products</CardTitle>
          <CardDescription>
            Manage your product catalog with integrated Stripe synchronization
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="rounded-md border">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead className="w-[300px]">Product</TableHead>
                  <TableHead>Type</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Price</TableHead>
                  <TableHead>Stock</TableHead>
                  <TableHead>Stripe</TableHead>
                  <TableHead className="text-right">Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {products.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={7} className="h-24 text-center">
                      No products found. Create your first product to get started.
                    </TableCell>
                  </TableRow>
                ) : (
                  products.map((product) => (
                    <TableRow key={product.id}>
                      <TableCell className="font-medium">
                        <div className="space-y-1">
                          <div className="font-medium">{product.name}</div>
                          <div className="text-sm text-muted-foreground line-clamp-2">
                            {product.description || 'No description'}
                          </div>
                          {product.variants && product.variants.length > 0 && (
                            <div className="text-xs text-muted-foreground">
                              {product.variants.length} variant{product.variants.length !== 1 ? 's' : ''}
                            </div>
                          )}
                        </div>
                      </TableCell>
                      <TableCell>
                        <Badge variant="secondary" className="capitalize">
                          {product.product_type.replace('_', ' ')}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center">
                          <div className={`h-2.5 w-2.5 rounded-full mr-2 ${
                            product.active ? 'bg-green-500' : 'bg-gray-300'
                          }`} />
                          {product.active ? 'Active' : 'Inactive'}
                        </div>
                      </TableCell>
                      <TableCell>
                        {product.price ? `$${product.price.toFixed(2)}` : 'Varies'}
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center">
                          <span className={
                            (product.inventory_quantity || 0) < 10 
                              ? 'text-red-600' 
                              : 'text-green-600'
                          }>
                            {product.inventory_quantity || 0}
                          </span>
                          {(product.inventory_quantity || 0) < 10 && (
                            <AlertTriangle className="h-4 w-4 ml-2 text-red-500" />
                          )}
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center">
                          {product.stripe_product_id ? (
                            <Check className="h-4 w-4 text-green-500" />
                          ) : (
                            <X className="h-4 w-4 text-red-500" />
                          )}
                        </div>
                      </TableCell>
                      <TableCell className="text-right">
                        <div className="flex justify-end space-x-2">
                          <Button 
                            variant="outline" 
                            size="sm" 
                            onClick={() => handleEdit(product)}
                          >
                            <Pencil className="h-4 w-4 mr-1" />
                            Edit
                          </Button>
                          <AlertDialog>
                            <AlertDialogTrigger asChild>
                              <Button 
                                variant="outline" 
                                size="sm"
                                className="text-destructive hover:bg-destructive/10 hover:text-destructive"
                              >
                                <Trash2 className="h-4 w-4 mr-1" />
                                Delete
                              </Button>
                            </AlertDialogTrigger>
                            <AlertDialogContent>
                              <AlertDialogHeader>
                                <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
                                <AlertDialogDescription>
                                  This action cannot be undone. This will permanently delete the product
                                  "{product.name}" and all its variants.
                                </AlertDialogDescription>
                              </AlertDialogHeader>
                              <AlertDialogFooter>
                                <AlertDialogCancel>Cancel</AlertDialogCancel>
                                <AlertDialogAction 
                                  onClick={() => product.id && handleDelete(product.id)}
                                  className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
                                >
                                  Delete
                                </AlertDialogAction>
                              </AlertDialogFooter>
                            </AlertDialogContent>
                          </AlertDialog>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))
                )}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

// Product Form Component
interface ProductFormProps {
  product?: Product | null;
  onSave: (data: ProductFormData) => void;
  onCancel: () => void;
  isSubmitting: boolean;
}

const ProductForm: React.FC<ProductFormProps> = ({
  product,
  onSave,
  onCancel,
  isSubmitting,
}) => {
  const [formData, setFormData] = useState<ProductFormData>({
    name: product?.name || '',
    description: product?.description || '',
    price: product?.price || 0,
    category: product?.category || '',
    product_type: product?.product_type || 'physical',
    images: product?.images || [],
    active: product?.active ?? true,
    inventory_quantity: product?.inventory_quantity || 0,
    variants: product?.variants || [],
    createInStripe: !product?.stripe_product_id,
  });

  const [currentVariant, setCurrentVariant] = useState<ProductVariant>({
    name: '',
    price: 0,
    attributes: {},
    inventory_quantity: 0,
    active: true,
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSave(formData);
  };

  const addVariant = () => {
    if (currentVariant.name) {
      setFormData(prev => ({
        ...prev,
        variants: [...(prev.variants || []), { ...currentVariant }]
      }));
      setCurrentVariant({
        name: '',
        price: 0,
        attributes: {},
        inventory_quantity: 0,
        active: true,
      });
    }
  };

  const removeVariant = (index: number) => {
    setFormData(prev => ({
      ...prev,
      variants: prev.variants?.filter((_, i) => i !== index) || []
    }));
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <Tabs defaultValue="basic" className="w-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="basic">Basic Info</TabsTrigger>
          <TabsTrigger value="variants">Variants</TabsTrigger>
          <TabsTrigger value="stripe">Stripe Integration</TabsTrigger>
        </TabsList>

        <TabsContent value="basic" className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <Label htmlFor="name">Product Name</Label>
              <Input
                id="name"
                value={formData.name}
                onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                required
              />
            </div>
            <div>
              <Label htmlFor="category">Category</Label>
              <Input
                id="category"
                value={formData.category}
                onChange={(e) => setFormData(prev => ({ ...prev, category: e.target.value }))}
              />
            </div>
          </div>

          <div>
            <Label htmlFor="description">Description</Label>
            <Textarea
              id="description"
              value={formData.description}
              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
              rows={3}
            />
          </div>

          <div className="grid grid-cols-3 gap-4">
            <div>
              <Label htmlFor="product_type">Product Type</Label>
              <Select
                value={formData.product_type}
                onValueChange={(value) => setFormData(prev => ({ ...prev, product_type: value }))}
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="physical">Physical</SelectItem>
                  <SelectItem value="digital">Digital</SelectItem>
                  <SelectItem value="service">Service</SelectItem>
                  <SelectItem value="subscription">Subscription</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="price">Base Price ($)</Label>
              <Input
                id="price"
                type="number"
                step="0.01"
                value={formData.price}
                onChange={(e) => setFormData(prev => ({ ...prev, price: parseFloat(e.target.value) || 0 }))}
              />
            </div>
            <div>
              <Label htmlFor="inventory">Initial Inventory</Label>
              <Input
                id="inventory"
                type="number"
                value={formData.inventory_quantity}
                onChange={(e) => setFormData(prev => ({ ...prev, inventory_quantity: parseInt(e.target.value) || 0 }))}
              />
            </div>
          </div>

          <div className="flex items-center space-x-2">
            <input
              type="checkbox"
              id="active"
              checked={formData.active}
              onChange={(e) => setFormData(prev => ({ ...prev, active: e.target.checked }))}
            />
            <Label htmlFor="active">Active</Label>
          </div>
        </TabsContent>

        <TabsContent value="variants" className="space-y-4">
          <div>
            <h3 className="text-lg font-medium">Product Variants</h3>
            <p className="text-sm text-muted-foreground">
              Create variants for different sizes, colors, or configurations
            </p>
          </div>

          {/* Add Variant Form */}
          <Card>
            <CardHeader>
              <CardTitle className="text-base">Add New Variant</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-3 gap-4">
                <div>
                  <Label>Variant Name</Label>
                  <Input
                    value={currentVariant.name}
                    onChange={(e) => setCurrentVariant(prev => ({ ...prev, name: e.target.value }))}
                    placeholder="e.g., Large, Red, Premium"
                  />
                </div>
                <div>
                  <Label>Price ($)</Label>
                  <Input
                    type="number"
                    step="0.01"
                    value={currentVariant.price}
                    onChange={(e) => setCurrentVariant(prev => ({ ...prev, price: parseFloat(e.target.value) || 0 }))}
                  />
                </div>
                <div>
                  <Label>Stock</Label>
                  <Input
                    type="number"
                    value={currentVariant.inventory_quantity}
                    onChange={(e) => setCurrentVariant(prev => ({ ...prev, inventory_quantity: parseInt(e.target.value) || 0 }))}
                  />
                </div>
              </div>
              <Button type="button" onClick={addVariant} disabled={!currentVariant.name}>
                <Plus className="h-4 w-4 mr-2" />
                Add Variant
              </Button>
            </CardContent>
          </Card>

          {/* Existing Variants */}
          {formData.variants && formData.variants.length > 0 && (
            <div className="space-y-2">
              <h4 className="font-medium">Current Variants</h4>
              {formData.variants.map((variant, index) => (
                <div key={index} className="flex items-center justify-between p-3 border rounded-lg">
                  <div>
                    <span className="font-medium">{variant.name}</span>
                    <span className="ml-4 text-sm text-muted-foreground">
                      ${variant.price.toFixed(2)} • Stock: {variant.inventory_quantity}
                    </span>
                  </div>
                  <Button 
                    type="button" 
                    variant="outline" 
                    size="sm" 
                    onClick={() => removeVariant(index)}
                  >
                    <Trash2 className="h-4 w-4" />
                  </Button>
                </div>
              ))}
            </div>
          )}
        </TabsContent>

        <TabsContent value="stripe" className="space-y-4">
          <div>
            <h3 className="text-lg font-medium">Stripe Integration</h3>
            <p className="text-sm text-muted-foreground">
              Configure how this product integrates with Stripe
            </p>
          </div>

          <div className="flex items-center space-x-2">
            <input
              type="checkbox"
              id="createInStripe"
              checked={formData.createInStripe}
              onChange={(e) => setFormData(prev => ({ ...prev, createInStripe: e.target.checked }))}
            />
            <Label htmlFor="createInStripe">
              {product?.stripe_product_id ? 'Update in Stripe' : 'Create in Stripe'}
            </Label>
          </div>

          {product?.stripe_product_id && (
            <div className="p-4 bg-muted rounded-lg">
              <p className="text-sm">
                <strong>Stripe Product ID:</strong> {product.stripe_product_id}
              </p>
              {product.stripe_price_id && (
                <p className="text-sm mt-1">
                  <strong>Stripe Price ID:</strong> {product.stripe_price_id}
                </p>
              )}
            </div>
          )}
        </TabsContent>
      </Tabs>

      <div className="flex justify-end space-x-2 pt-4 border-t">
        <Button type="button" variant="outline" onClick={onCancel}>
          Cancel
        </Button>
        <Button type="submit" disabled={isSubmitting}>
          {isSubmitting ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              {product ? 'Updating...' : 'Creating...'}
            </>
          ) : (
            product ? 'Update Product' : 'Create Product'
          )}
        </Button>
      </div>
    </form>
  );
};
