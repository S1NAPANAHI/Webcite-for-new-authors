import { createClient } from '@supabase/supabase-js';
import { writeFileSync } from 'fs';
import { join } from 'path';

// Full path to .env file
const envPath = 'C:/Users/Sinap/OneDrive/WORK/MACHINE LEARNING/MACHINE LEARNING/Website/ZOROASTERVERSE/.env';

import { readFileSync } from 'fs';

// Read and parse .env file
const envFile = readFileSync(envPath, 'utf-8');
const envVars = envFile
  .split('\n')
  .filter((line: string) => line && !line.startsWith('#'))
  .reduce((acc: Record<string, string>, line: string) => {
    const [key, ...value] = line.split('=');
    if (key && value) {
      acc[key.trim()] = value.join('=').trim().replace(/['"]/g, '');
    }
    return acc;
  }, {} as Record<string, string>);

const supabaseUrl = envVars.VITE_SUPABASE_URL;
const supabaseKey = envVars.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('Error: Missing required environment variables');
  console.error(`VITE_SUPABASE_URL: ${supabaseUrl ? '✅ Set' : '❌ Missing'}`);
  console.error(`VITE_SUPABASE_ANON_KEY: ${supabaseKey ? '✅ Set' : '❌ Missing'}`);
  console.error(`Looking for .env file at: ${envPath}`);
  process.exit(1);
}

console.log('Found Supabase URL:', supabaseUrl.replace(/\/\/([^:]+):([^@]+)@/, '//$1:*****@'));

const supabase = createClient(supabaseUrl, supabaseKey);

async function generateTypes() {
  const { data, error } = await supabase.rpc('get_type_definition', {
    schema_name: 'public',
    include_private: false,
  });

  if (error) {
    console.error('Error generating types:', error);
    process.exit(1);
  }

  const typesPath = join(__dirname, '..', 'packages', 'shared', 'src', 'database.types.ts');
  
  const typeDefinition = `// This file is auto-generated by the generate-types script
// Do not edit this file directly

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[];

export interface Database {
  public: {
    Tables: ${JSON.stringify(data.Tables, null, 2)};
    Views: ${JSON.stringify(data.Views, null, 2)};
    Functions: ${JSON.stringify(data.Functions, null, 2)};
    Enums: ${JSON.stringify(data.Enums, null, 2)};
  };
}

// Helper types for database rows
export type Tables<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Row'];
export type Enums<T extends keyof Database['public']['Enums']> = Database['public']['Enums'][T];
`;

  writeFileSync(typesPath, typeDefinition);
  console.log(`Types generated successfully at ${typesPath}`);
}

generateTypes().catch(console.error);