import React, { useState, useEffect } from 'react';
import { Button } from './components/ui/button';
import { Input } from './components/ui/input';
import { Label } from './components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './components/ui/select';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './components/ui/tabs';
import { Badge } from './components/ui/badge';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from './components/ui/dialog';
import { toast } from 'sonner';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from './components/ui/table';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from './components/ui/dropdown-menu';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from './components/ui/alert-dialog';
import {
  Loader2,
  Search,
  Filter,
  MoreHorizontal,
  Eye,
  Edit,
  Trash2,
  Shield,
  Crown,
  User,
  Users,
  UserCheck,
  UserX,
  Mail,
  Calendar,
  Activity,
  RefreshCw,
} from 'lucide-react';

interface UserProfile {
  id: string;
  email: string;
  profile: {
    display_name: string | null;
    avatar_url: string | null;
  };
  role: 'admin' | 'moderator' | 'user';
  created_at: string;
  last_sign_in: string | null;
  subscriptions: Array<{
    id: string;
    status: string;
    plan_id: string;
    current_period_start: string;
    current_period_end: string;
  }>;
  permissions?: string[];
  active?: boolean;
}

const ROLE_COLORS: Record<string, string> = {
  admin: 'bg-red-100 text-red-800',
  moderator: 'bg-blue-100 text-blue-800',
  user: 'bg-gray-100 text-gray-800',
};

const ROLE_ICONS: Record<string, React.ElementType> = {
  admin: Crown,
  moderator: Shield,
  user: User,
};

const USER_PERMISSIONS = [
  { id: 'content.read', name: 'Read Content', description: 'View published content' },
  { id: 'content.write', name: 'Write Content', description: 'Create and edit content' },
  { id: 'content.delete', name: 'Delete Content', description: 'Remove content' },
  { id: 'users.read', name: 'View Users', description: 'View user profiles' },
  { id: 'users.write', name: 'Manage Users', description: 'Edit user profiles and roles' },
  { id: 'orders.read', name: 'View Orders', description: 'Access order information' },
  { id: 'orders.write', name: 'Manage Orders', description: 'Update order status' },
  { id: 'analytics.read', name: 'View Analytics', description: 'Access reports and metrics' },
  { id: 'admin.full', name: 'Full Admin Access', description: 'Complete system access' },
];

export const EnhancedUsersManagement: React.FC = () => {
  const [users, setUsers] = useState<UserProfile[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedUser, setSelectedUser] = useState<UserProfile | null>(null);
  const [isUserDetailOpen, setIsUserDetailOpen] = useState(false);
  const [isRoleDialogOpen, setIsRoleDialogOpen] = useState(false);
  const [filters, setFilters] = useState({
    role: '',
    search: '',
    subscription: '',
  });
  const [pagination, setPagination] = useState({
    page: 1,
    limit: 20,
    total: 0,
  });

  const fetchUsers = async () => {
    setIsLoading(true);
    try {
      const params = new URLSearchParams({
        limit: pagination.limit.toString(),
        offset: ((pagination.page - 1) * pagination.limit).toString(),
        ...(filters.role && { role: filters.role }),
        ...(filters.search && { search: filters.search }),
        ...(filters.subscription && { subscription: filters.subscription }),
      });

      const response = await fetch(`/api/admin/users?${params}`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      setUsers(data || []);
    } catch (error) {
      console.error('Error fetching users:', error);
      toast.error('Failed to load users');
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchUsers();
  }, [pagination.page, pagination.limit]);

  const handleRoleUpdate = async (userId: string, newRole: string) => {
    try {
      const response = await fetch(`/api/admin/users/${userId}/role`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ role: newRole }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to update user role');
      }

      toast.success('User role updated successfully');
      setIsRoleDialogOpen(false);
      setSelectedUser(null);
      await fetchUsers();
    } catch (error) {
      console.error('Error updating user role:', error);
      toast.error(error instanceof Error ? error.message : 'Failed to update user role');
    }
  };

  const handleUserActivation = async (userId: string, activate: boolean) => {
    try {
      const response = await fetch(`/api/admin/users/${userId}/activate`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ active: activate }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to update user status');
      }

      toast.success(`User ${activate ? 'activated' : 'deactivated'} successfully`);
      await fetchUsers();
    } catch (error) {
      console.error('Error updating user status:', error);
      toast.error(error instanceof Error ? error.message : 'Failed to update user status');
    }
  };

  const handlePermissionUpdate = async (userId: string, permissions: string[]) => {
    try {
      const response = await fetch(`/api/admin/users/${userId}/permissions`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ permissions }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to update permissions');
      }

      toast.success('User permissions updated successfully');
      await fetchUsers();
    } catch (error) {
      console.error('Error updating permissions:', error);
      toast.error(error instanceof Error ? error.message : 'Failed to update permissions');
    }
  };

  const handleSearch = () => {
    setPagination(prev => ({ ...prev, page: 1 }));
    fetchUsers();
  };

  const clearFilters = () => {
    setFilters({
      role: '',
      search: '',
      subscription: '',
    });
    setPagination(prev => ({ ...prev, page: 1 }));
    setTimeout(() => fetchUsers(), 100);
  };

  const openUserDetail = (user: UserProfile) => {
    setSelectedUser(user);
    setIsUserDetailOpen(true);
  };

  const openRoleDialog = (user: UserProfile) => {
    setSelectedUser(user);
    setIsRoleDialogOpen(true);
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center p-8">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
        <span className="ml-2">Loading users...</span>
      </div>
    );
  }

  const activeUsers = users.filter(u => u.active !== false).length;
  const adminUsers = users.filter(u => u.role === 'admin').length;
  const subscribedUsers = users.filter(u => u.subscriptions.some(s => s.status === 'active')).length;

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-3xl font-bold tracking-tight">User Management</h2>
          <p className="text-muted-foreground">
            Manage user accounts, roles, and permissions
          </p>
        </div>
        <div className="flex gap-3">
          <Button onClick={fetchUsers} variant="outline">
            <RefreshCw className="mr-2 h-4 w-4" />
            Refresh
          </Button>
        </div>
      </div>

      {/* Statistics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Users</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{users.length}</div>
            <p className="text-xs text-muted-foreground">
              Registered accounts
            </p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Active Users</CardTitle>
            <UserCheck className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">{activeUsers}</div>
            <p className="text-xs text-muted-foreground">
              {((activeUsers / users.length) * 100 || 0).toFixed(1)}% of total
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Administrators</CardTitle>
            <Crown className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-600">{adminUsers}</div>
            <p className="text-xs text-muted-foreground">
              With admin access
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Subscribers</CardTitle>
            <Activity className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-600">{subscribedUsers}</div>
            <p className="text-xs text-muted-foreground">
              Active subscriptions
            </p>
          </CardContent>
        </Card>
      </div>

      <Tabs defaultValue="users">
        <TabsList>
          <TabsTrigger value="users">User Accounts</TabsTrigger>
          <TabsTrigger value="roles">Roles & Permissions</TabsTrigger>
          <TabsTrigger value="activity">Activity Log</TabsTrigger>
        </TabsList>

        <TabsContent value="users" className="space-y-6">
          {/* Filters */}
          <Card>
            <CardHeader>
              <CardTitle className="text-base">Filters</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div>
                  <Label>Search Users</Label>
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
                    <Input
                      placeholder="Email, name..."
                      className="pl-10"
                      value={filters.search}
                      onChange={(e) => setFilters(prev => ({ ...prev, search: e.target.value }))}
                      onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
                    />
                  </div>
                </div>
                <div>
                  <Label>Role</Label>
                  <Select
                    value={filters.role}
                    onValueChange={(value) => setFilters(prev => ({ ...prev, role: value }))}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="All roles" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="">All Roles</SelectItem>
                      <SelectItem value="admin">Admin</SelectItem>
                      <SelectItem value="moderator">Moderator</SelectItem>
                      <SelectItem value="user">User</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label>Subscription Status</Label>
                  <Select
                    value={filters.subscription}
                    onValueChange={(value) => setFilters(prev => ({ ...prev, subscription: value }))}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="All users" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="">All Users</SelectItem>
                      <SelectItem value="active">Active Subscribers</SelectItem>
                      <SelectItem value="inactive">Non-subscribers</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="flex items-end gap-2">
                  <Button onClick={handleSearch}>
                    <Search className="h-4 w-4 mr-2" />
                    Search
                  </Button>
                  <Button variant="outline" onClick={clearFilters}>
                    Clear
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Users Table */}
          <Card>
            <CardHeader>
              <CardTitle>User Accounts</CardTitle>
              <CardDescription>
                Manage user accounts, roles, and access
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>User</TableHead>
                    <TableHead>Role</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Subscription</TableHead>
                    <TableHead>Last Sign In</TableHead>
                    <TableHead>Joined</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {users.length === 0 ? (
                    <TableRow>
                      <TableCell colSpan={7} className="h-24 text-center">
                        No users found.
                      </TableCell>
                    </TableRow>
                  ) : (
                    users.map((user) => {
                      const RoleIcon = ROLE_ICONS[user.role];
                      const activeSubscription = user.subscriptions.find(s => s.status === 'active');
                      
                      return (
                        <TableRow key={user.id}>
                          <TableCell className="font-medium">
                            <div className="flex items-center space-x-3">
                              <div className="w-8 h-8 rounded-full bg-blue-500 flex items-center justify-center text-white text-sm font-bold">
                                {user.profile?.display_name?.charAt(0) || user.email.charAt(0).toUpperCase()}
                              </div>
                              <div>
                                <div className="font-medium">
                                  {user.profile?.display_name || 'Anonymous User'}
                                </div>
                                <div className="text-sm text-muted-foreground">{user.email}</div>
                              </div>
                            </div>
                          </TableCell>
                          <TableCell>
                            <Badge className={ROLE_COLORS[user.role]}>
                              <RoleIcon className="h-3 w-3 mr-1" />
                              {user.role.charAt(0).toUpperCase() + user.role.slice(1)}
                            </Badge>
                          </TableCell>
                          <TableCell>
                            <div className="flex items-center">
                              <div className={`h-2.5 w-2.5 rounded-full mr-2 ${
                                user.active !== false ? 'bg-green-500' : 'bg-red-500'
                              }`} />
                              {user.active !== false ? 'Active' : 'Inactive'}
                            </div>
                          </TableCell>
                          <TableCell>
                            {activeSubscription ? (
                              <Badge className="bg-green-100 text-green-800">
                                Active
                              </Badge>
                            ) : (
                              <Badge variant="outline">None</Badge>
                            )}
                          </TableCell>
                          <TableCell>
                            <div className="text-sm">
                              {user.last_sign_in 
                                ? new Date(user.last_sign_in).toLocaleDateString()
                                : 'Never'
                              }
                            </div>
                          </TableCell>
                          <TableCell>
                            <div className="text-sm">
                              {new Date(user.created_at).toLocaleDateString()}
                            </div>
                          </TableCell>
                          <TableCell className="text-right">
                            <DropdownMenu>
                              <DropdownMenuTrigger asChild>
                                <Button variant="ghost" className="h-8 w-8 p-0">
                                  <MoreHorizontal className="h-4 w-4" />
                                </Button>
                              </DropdownMenuTrigger>
                              <DropdownMenuContent align="end">
                                <DropdownMenuLabel>Actions</DropdownMenuLabel>
                                <DropdownMenuItem onClick={() => openUserDetail(user)}>
                                  <Eye className="mr-2 h-4 w-4" />
                                  View Details
                                </DropdownMenuItem>
                                <DropdownMenuItem onClick={() => openRoleDialog(user)}>
                                  <Edit className="mr-2 h-4 w-4" />
                                  Edit Role
                                </DropdownMenuItem>
                                <DropdownMenuSeparator />
                                {user.active !== false ? (
                                  <DropdownMenuItem 
                                    onClick={() => handleUserActivation(user.id, false)}
                                    className="text-red-600"
                                  >
                                    <UserX className="mr-2 h-4 w-4" />
                                    Deactivate User
                                  </DropdownMenuItem>
                                ) : (
                                  <DropdownMenuItem 
                                    onClick={() => handleUserActivation(user.id, true)}
                                    className="text-green-600"
                                  >
                                    <UserCheck className="mr-2 h-4 w-4" />
                                    Activate User
                                  </DropdownMenuItem>
                                )}
                              </DropdownMenuContent>
                            </DropdownMenu>
                          </TableCell>
                        </TableRow>
                      );
                    })
                  )}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="roles">
          <Card>
            <CardHeader>
              <CardTitle>Role & Permission Management</CardTitle>
              <CardDescription>
                Configure user roles and their associated permissions
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                <div>
                  <h3 className="text-lg font-medium mb-4">Available Permissions</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {USER_PERMISSIONS.map((permission) => (
                      <div key={permission.id} className="p-4 border rounded-lg">
                        <div className="font-medium">{permission.name}</div>
                        <div className="text-sm text-muted-foreground">{permission.description}</div>
                        <div className="text-xs text-muted-foreground mt-1 font-mono">
                          {permission.id}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                <div>
                  <h3 className="text-lg font-medium mb-4">Default Role Permissions</h3>
                  <div className="space-y-4">
                    <div className="p-4 border rounded-lg">
                      <div className="flex items-center mb-2">
                        <Crown className="h-4 w-4 mr-2 text-red-500" />
                        <span className="font-medium">Administrator</span>
                      </div>
                      <p className="text-sm text-muted-foreground">
                        Full system access including user management, content control, and system configuration
                      </p>
                    </div>
                    <div className="p-4 border rounded-lg">
                      <div className="flex items-center mb-2">
                        <Shield className="h-4 w-4 mr-2 text-blue-500" />
                        <span className="font-medium">Moderator</span>
                      </div>
                      <p className="text-sm text-muted-foreground">
                        Content moderation, limited user management, and reporting access
                      </p>
                    </div>
                    <div className="p-4 border rounded-lg">
                      <div className="flex items-center mb-2">
                        <User className="h-4 w-4 mr-2 text-gray-500" />
                        <span className="font-medium">User</span>
                      </div>
                      <p className="text-sm text-muted-foreground">
                        Standard user access with content consumption and basic account management
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="activity">
          <Card>
            <CardHeader>
              <CardTitle>User Activity Log</CardTitle>
              <CardDescription>
                Track user actions and system events
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="text-center py-8">
                <Activity className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                <p className="text-lg font-medium">Activity Logging</p>
                <p className="text-muted-foreground">
                  User activity tracking will be implemented here
                </p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* User Detail Dialog */}
      <Dialog open={isUserDetailOpen} onOpenChange={setIsUserDetailOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>User Details</DialogTitle>
          </DialogHeader>
          {selectedUser && <UserDetailView user={selectedUser} />}
        </DialogContent>
      </Dialog>

      {/* Role Edit Dialog */}
      <Dialog open={isRoleDialogOpen} onOpenChange={setIsRoleDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Edit User Role</DialogTitle>
          </DialogHeader>
          {selectedUser && (
            <RoleEditForm
              user={selectedUser}
              onSave={handleRoleUpdate}
              onCancel={() => setIsRoleDialogOpen(false)}
            />
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
};

// User Detail Component
interface UserDetailViewProps {
  user: UserProfile;
}

const UserDetailView: React.FC<UserDetailViewProps> = ({ user }) => {
  return (
    <div className="space-y-6">
      <div className="flex items-center space-x-4">
        <div className="w-16 h-16 rounded-full bg-blue-500 flex items-center justify-center text-white text-xl font-bold">
          {user.profile?.display_name?.charAt(0) || user.email.charAt(0).toUpperCase()}
        </div>
        <div>
          <h3 className="text-xl font-bold">
            {user.profile?.display_name || 'Anonymous User'}
          </h3>
          <p className="text-muted-foreground">{user.email}</p>
          <Badge className={ROLE_COLORS[user.role]}>
            {user.role.charAt(0).toUpperCase() + user.role.slice(1)}
          </Badge>
        </div>
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div>
          <Label className="text-sm font-medium">User ID</Label>
          <p className="text-sm font-mono">{user.id}</p>
        </div>
        <div>
          <Label className="text-sm font-medium">Status</Label>
          <p className="text-sm">{user.active !== false ? 'Active' : 'Inactive'}</p>
        </div>
        <div>
          <Label className="text-sm font-medium">Joined</Label>
          <p className="text-sm">{new Date(user.created_at).toLocaleDateString()}</p>
        </div>
        <div>
          <Label className="text-sm font-medium">Last Sign In</Label>
          <p className="text-sm">
            {user.last_sign_in ? new Date(user.last_sign_in).toLocaleDateString() : 'Never'}
          </p>
        </div>
      </div>

      {user.subscriptions.length > 0 && (
        <div>
          <Label className="text-sm font-medium">Subscriptions</Label>
          <div className="mt-2 space-y-2">
            {user.subscriptions.map((sub) => (
              <div key={sub.id} className="p-3 border rounded-lg">
                <div className="flex justify-between items-center">
                  <span className="font-medium">{sub.plan_id}</span>
                  <Badge className={sub.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}>
                    {sub.status}
                  </Badge>
                </div>
                {sub.status === 'active' && (
                  <p className="text-sm text-muted-foreground">
                    Valid until {new Date(sub.current_period_end).toLocaleDateString()}
                  </p>
                )}
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

// Role Edit Form Component
interface RoleEditFormProps {
  user: UserProfile;
  onSave: (userId: string, role: string) => void;
  onCancel: () => void;
}

const RoleEditForm: React.FC<RoleEditFormProps> = ({ user, onSave, onCancel }) => {
  const [selectedRole, setSelectedRole] = useState(user.role);

  const handleSubmit = () => {
    onSave(user.id, selectedRole);
  };

  return (
    <div className="space-y-4">
      <div className="p-4 bg-muted rounded-lg">
        <p className="font-medium">{user.profile?.display_name || 'Anonymous User'}</p>
        <p className="text-sm text-muted-foreground">{user.email}</p>
      </div>

      <div>
        <Label>New Role</Label>
        <Select value={selectedRole} onValueChange={setSelectedRole}>
          <SelectTrigger>
            <SelectValue />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="user">User</SelectItem>
            <SelectItem value="moderator">Moderator</SelectItem>
            <SelectItem value="admin">Administrator</SelectItem>
          </SelectContent>
        </Select>
        <p className="text-sm text-muted-foreground mt-1">
          This will change the user's access level and permissions immediately.
        </p>
      </div>

      <div className="flex justify-end space-x-2 pt-4 border-t">
        <Button variant="outline" onClick={onCancel}>
          Cancel
        </Button>
        <Button onClick={handleSubmit} disabled={selectedRole === user.role}>
          Update Role
        </Button>
      </div>
    </div>
  );
};
