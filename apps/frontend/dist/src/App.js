import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React from 'react';
import { BrowserRouter as Router, Route, Routes, useParams } from 'react-router-dom';
import { Layout, HomePage, AdminStorePage, LibraryPage, SubscriptionPage, SubscriptionSuccessPage, WikiViewer, CharactersPage, LocationsPage, GlossaryPage, ReviewsPage, BlogPage, NotFoundPage, BetaPortalPage, BetaApplicationStatusPage, WorkReaderPage, CheckoutPage, AdminProtectedRoute, AdminLayout, DashboardPage, HomepageContentManager, PostsManager, PagesManager, CharactersManager, WorksManager, AdminUploadPage, UsersManagement, StarsBackground, ChapterUploadPage, WikiManager, WikiEditor, TimelineManager, BetaReaderHandbookPage, OperationalTimelinePage, ViewNDAPage, BetaFeedbackPage } from '@zoroaster/ui';
import { LoginPage } from '@zoroaster/ui';
import { fetchWikiPage } from '@zoroaster/shared'; // Import the type
import ProtectedRoute from './components/ProtectedRoute/ProtectedRoute';
import BetaApplicationsManager from './admin/BetaApplicationsManager';
import Timelines from './pages/Timelines';
import BetaApplication from './components/BetaApplication/BetaApplication'; // Import the new BetaApplication component
import { CartProvider, AuthProvider } from '@zoroaster/shared';
import StorePage from './pages/StorePage'; // This one is local
import BlogPostPage from './pages/BlogPostPage'; // This one is local
import GenericPage from './pages/GenericPage'; // This one is local
import ProfileDashboard from './pages/ProfileDashboard'; // New Profile Dashboard
import ArtistCollaborationPage from './pages/ArtistCollaborationPage';
const App = () => {
    const [currentPage, setCurrentPage] = React.useState(null);
    const params = useParams();
    React.useEffect(() => {
        if (params.pageSlug) {
            fetchWikiPage(params.pageSlug).then(setCurrentPage);
        }
    }, [params.pageSlug]);
    return (_jsx(CartProvider, { children: _jsx(AuthProvider, { children: _jsxs(Router, { children: [_jsx(StarsBackground, {}), _jsxs(Routes, { children: [_jsx(Route, { path: "/login", element: _jsx(LoginPage, {}) }), _jsxs(Route, { element: _jsx(Layout, {}), children: [_jsx(Route, { path: "/", element: _jsx(HomePage, {}) }), _jsx(Route, { path: "/store", element: _jsx(StorePage, {}) }), _jsx(Route, { path: "/checkout", element: _jsx(CheckoutPage, {}) }), _jsx(Route, { path: "/library", element: _jsx(LibraryPage, {}) }), _jsx(Route, { path: "/subscriptions", element: _jsx(SubscriptionPage, {}) }), _jsx(Route, { path: "/subscription-success", element: _jsx(SubscriptionSuccessPage, {}) }), _jsxs(Route, { path: "/wiki", children: [_jsx(Route, { index: true, element: currentPage ? _jsx(WikiViewer, { page: currentPage }) : _jsx("div", { children: "Loading..." }) }), _jsx(Route, { path: ":folderSlug", element: currentPage ? _jsx(WikiViewer, { page: currentPage }) : _jsx("div", { children: "Loading..." }) }), _jsx(Route, { path: ":folderSlug/:pageSlug", element: currentPage ? _jsx(WikiViewer, { page: currentPage }) : _jsx("div", { children: "Loading..." }) })] }), _jsx(Route, { path: "/timelines", element: _jsx(Timelines, {}) }), _jsx(Route, { path: "/characters", element: _jsx(CharactersPage, {}) }), _jsx(Route, { path: "/locations", element: _jsx(LocationsPage, {}) }), _jsx(Route, { path: "/glossary", element: _jsx(GlossaryPage, {}) }), _jsx(Route, { path: "/reviews", element: _jsx(ReviewsPage, {}) }), _jsx(Route, { path: "/account/*", element: _jsx(ProfileDashboard, {}) }), _jsx(Route, { path: "/blog", element: _jsx(BlogPage, {}) }), _jsx(Route, { path: "/blog/:slug", element: _jsx(BlogPostPage, {}) }), _jsx(Route, { path: "/beta/application", element: _jsx(ProtectedRoute, { children: _jsx(BetaApplication, {}) }) }), _jsx(Route, { path: "/artist-collaboration", element: _jsx(ArtistCollaborationPage, {}) }), _jsx(Route, { path: "/read/:workId", element: _jsx(WorkReaderPage, {}) }), _jsx(Route, { path: "/beta/status", element: _jsx(BetaApplicationStatusPage, {}) }), _jsx(Route, { path: "/beta/handbook", element: _jsx(BetaReaderHandbookPage, {}) }), _jsx(Route, { path: "/beta/timeline", element: _jsx(OperationalTimelinePage, {}) }), _jsx(Route, { path: "/beta/nda", element: _jsx(ViewNDAPage, {}) }), _jsx(Route, { path: "/beta/feedback", element: _jsx(BetaFeedbackPage, {}) }), _jsx(Route, { path: "/beta/portal", element: _jsx(ProtectedRoute, { children: _jsx(BetaPortalPage, {}) }) }), _jsx(Route, { path: "/:slug", element: _jsx(GenericPage, {}) }), _jsx(Route, { path: "*", element: _jsx(NotFoundPage, {}) })] }), _jsxs(Route, { path: "/account/admin", element: _jsx(AdminProtectedRoute, { children: _jsx(AdminLayout, {}) }), children: [_jsx(Route, { index: true, element: _jsx(DashboardPage, {}) }), _jsx(Route, { path: "homepage-content", element: _jsx(HomepageContentManager, {}) }), _jsx(Route, { path: "posts", element: _jsx(PostsManager, {}) }), _jsx(Route, { path: "pages", element: _jsx(PagesManager, {}) }), _jsx(Route, { path: "characters", element: _jsx(CharactersManager, {}) }), _jsx(Route, { path: "works", element: _jsx(WorksManager, {}) }), _jsx(Route, { path: "upload-work", element: _jsx(AdminUploadPage, {}) }), _jsx(Route, { path: "upload-chapter", element: _jsx(ChapterUploadPage, {}) }), _jsx(Route, { path: "users", element: _jsx(UsersManagement, {}) }), _jsx(Route, { path: "beta-applications", element: _jsx(BetaApplicationsManager, {}) }), _jsx(Route, { path: "wiki", element: _jsx(WikiManager, {}) }), _jsx(Route, { path: "wiki/folder/:folderId", element: _jsx(WikiManager, {}) }), _jsx(Route, { path: "wiki/new", element: _jsx(WikiEditor, {}) }), _jsx(Route, { path: "wiki/edit/:id", element: _jsx(WikiEditor, {}) }), _jsx(Route, { path: "timeline/events", element: _jsx(TimelineManager, {}) }), _jsx(Route, { path: "store", element: _jsx(AdminStorePage, {}) }), _jsx(Route, { path: "library", element: _jsx("div", { children: "Library Management Coming Soon!" }) }), _jsx(Route, { path: "characters", element: _jsx("div", { children: "Characters Management Coming Soon!" }) }), _jsx(Route, { path: "beta-program", element: _jsx("div", { children: "Beta Program Management Coming Soon!" }) }), _jsx(Route, { path: "media", element: _jsx("div", { children: "Media Management Coming Soon!" }) }), _jsx(Route, { path: "settings", element: _jsx("div", { children: "Settings Coming Soon!" }) })] })] })] }) }) }));
};
export default App;
//# sourceMappingURL=App.js.map